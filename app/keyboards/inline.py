from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Optional

def main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(text="üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", callback_data="add_income"),
        InlineKeyboardButton(text="üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç—ã", callback_data="reports"),
        InlineKeyboardButton(text="üìà –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    )
    keyboard.row(
        InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    )
    
    return keyboard.as_markup()

def operations_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", callback_data="add_income")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense")],
    ])

def categories_keyboard(categories: List[dict], operation_type: str = "expense") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    for i in range(0, len(categories), 2):
        row_buttons = []
        for j in range(2):
            if i + j < len(categories):
                cat = categories[i + j]
                icon = cat.get('icon', 'üìù')
                name = cat['name']
                callback_data = f"cat_{cat['id']}"
                row_buttons.append(
                    InlineKeyboardButton(text=f"{icon} {name}", callback_data=callback_data)
                )
        keyboard.row(*row_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.row(
        InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"new_category_{operation_type}")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_operation_type")
    )
    
    return keyboard.as_markup()

def confirm_operation_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save"),
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="confirm_edit")
    )
    keyboard.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel")
    )
    
    return keyboard.as_markup()

def reports_menu_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report_today"),
        InlineKeyboardButton(text="üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_week")
    )
    keyboard.row(
        InlineKeyboardButton(text="üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü", callback_data="report_month"),
        InlineKeyboardButton(text="üóìÔ∏è –ó–∞ –≥–æ–¥", callback_data="report_year")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìã –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="report_custom")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="report_categories"),
        InlineKeyboardButton(text="üìà –¢—Ä–µ–Ω–¥—ã", callback_data="report_trends")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    return keyboard.as_markup()

def settings_menu_keyboard() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(text="üí± –í–∞–ª—é—Ç–∞", callback_data="setting_currency"),
        InlineKeyboardButton(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="setting_timezone")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìä –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç", callback_data="setting_daily_limit"),
        InlineKeyboardButton(text="üìà –ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç", callback_data="setting_monthly_limit")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="setting_notifications"),
        InlineKeyboardButton(text="üé® –¢–µ–º–∞", callback_data="setting_theme")
    )
    keyboard.row(
        InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data"),
        InlineKeyboardButton(text="üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="import_data")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    return keyboard.as_markup()

def categories_management_keyboard() -> InlineKeyboardMarkup:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_categories")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤", callback_data="show_income_categories"),
        InlineKeyboardButton(text="üí∏ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤", callback_data="show_expense_categories")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    return keyboard.as_markup()

def currency_keyboard() -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã"""
    currencies = [
        ("üá∑üá∫ –†—É–±–ª—å", "RUB"),
        ("üá∫üá∏ –î–æ–ª–ª–∞—Ä", "USD"),
        ("üá™üá∫ –ï–≤—Ä–æ", "EUR"),
        ("üá¨üáß –§—É–Ω—Ç", "GBP"),
        ("üá®üá≥ –Æ–∞–Ω—å", "CNY"),
        ("üáØüáµ –ò–µ–Ω–∞", "JPY")
    ]
    
    keyboard = InlineKeyboardBuilder()
    
    for name, code in currencies:
        keyboard.row(
            InlineKeyboardButton(text=name, callback_data=f"currency_{code}")
        )
    
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
    )
    
    return keyboard.as_markup()

def yes_no_keyboard(yes_callback: str, no_callback: str) -> InlineKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=yes_callback),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=no_callback)
    )
    
    return keyboard.as_markup()

def pagination_keyboard(current_page: int, total_pages: int, callback_prefix: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardBuilder()
    
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if current_page > 1:
        buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{callback_prefix}_page_{current_page - 1}")
        )
    
    # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    buttons.append(
        InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="current_page")
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
    if current_page < total_pages:
        buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{callback_prefix}_page_{current_page + 1}")
        )
    
    keyboard.row(*buttons)
    
    return keyboard.as_markup()

def quick_amounts_keyboard(operation_type: str) -> InlineKeyboardMarkup:
    """–ë—ã—Å—Ç—Ä—ã–µ —Å—É–º–º—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
    keyboard = InlineKeyboardBuilder()
    
    if operation_type == "expense":
        amounts = [100, 200, 500, 1000, 2000, 5000]
    else:  # income
        amounts = [1000, 5000, 10000, 25000, 50000, 100000]
    
    # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for i in range(0, len(amounts), 3):
        row_buttons = []
        for j in range(3):
            if i + j < len(amounts):
                amount = amounts[i + j]
                row_buttons.append(
                    InlineKeyboardButton(
                        text=f"{amount:,} ‚ÇΩ".replace(',', ' '), 
                        callback_data=f"quick_amount_{amount}"
                    )
                )
        keyboard.row(*row_buttons)
    
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_amount")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    
    return keyboard.as_markup()