from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.crud import UserCRUD, OperationCRUD, CategoryCRUD
from app.keyboards.inline import get_category_selection_keyboard, main_menu_keyboard

router = Router()

class OperationStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_category = State()

@router.callback_query(F.data == "add_income")
async def cmd_add_income(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:", reply_markup=None)
    await state.set_state(OperationStates.waiting_for_amount)
    await state.update_data(operation_type="income")
    await cb.answer()

@router.callback_query(F.data == "add_expense")
async def cmd_add_expense(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=None)
    await state.set_state(OperationStates.waiting_for_amount)
    await state.update_data(operation_type="expense")
    await cb.answer()

@router.message(
    StateFilter(OperationStates.waiting_for_amount),
    F.text.regexp(r"^\d+(\.\d{1,2})?$")
)
async def process_amount(message: Message, state: FSMContext, db: AsyncSession):
    data = await state.get_data()
    op_type = data["operation_type"]
    amount = float(message.text)
    await state.update_data(amount=amount)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await UserCRUD.get_by_telegram_id(db, message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_income = True if op_type == "income" else False
    categories = await CategoryCRUD.get_user_categories(
        db=db,
        user_id=user.id,
        is_income=is_income
    )
    
    if not categories:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb = get_category_selection_keyboard(categories, operation_type=op_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())
    await state.set_state(OperationStates.waiting_for_category)

@router.message(
    StateFilter(OperationStates.waiting_for_amount),
    ~F.text.regexp(r"^\d+(\.\d{1,2})?$")
)
async def invalid_amount(message: Message):
    await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 99.50.")

@router.callback_query(
    StateFilter(OperationStates.waiting_for_category),
    F.data.startswith("select_category:")
)
async def process_category(cb: CallbackQuery, state: FSMContext, db: AsyncSession):
    data = await state.get_data()
    op_type = data["operation_type"]
    amount = data["amount"]
    
    callback_parts = cb.data.split(":")
    category_id = int(callback_parts[1])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = await UserCRUD.get_by_telegram_id(db, cb.from_user.id)
    if not user:
        await cb.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    from app.schemas.operation import OperationCreate
    from datetime import datetime, timezone
    
    op_create = OperationCreate(
        amount=amount,
        type=op_type,
        occurred_at=datetime.now(timezone.utc),
        category_id=category_id
    )

    try:
        await OperationCRUD.create(
            db=db,
            operation_data=op_create,
            user_id=user.id
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        category = await CategoryCRUD.get_category_by_id(db, category_id)
        category_name = f"{category.icon} {category.name}" if category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"

        await state.clear()
        await cb.message.edit_text(
            f"‚úÖ {'–î–æ—Ö–æ–¥' if op_type=='income' else '–†–∞—Å—Ö–æ–¥'} {amount:.2f}‚ÇΩ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}",
            reply_markup=main_menu_keyboard()
        )
        await cb.answer()

    except Exception as e:
        await cb.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(
    StateFilter(OperationStates.waiting_for_category),
    F.data == "add_category"
)
async def add_new_category_from_operation(cb: CallbackQuery, state: FSMContext):
    await cb.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")

@router.callback_query(
    StateFilter(OperationStates.waiting_for_category),
    F.data == "main_menu"
)
async def cancel_operation(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=main_menu_keyboard()
    )
    await cb.answer()