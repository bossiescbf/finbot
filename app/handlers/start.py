from aiogram import Router, F, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from ..database.database import get_async_session
from ..database.crud import UserCRUD
from ..keyboards.inline import main_menu_keyboard
from ..schemas.user import UserCreate

router = Router()

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    async with get_async_session() as db:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, is_new = await UserCRUD.get_or_create_user(
            db,
            telegram_id=message.from_user.id,
            first_name=message.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            last_name=message.from_user.last_name,
            username=message.from_user.username
        )
    
    if is_new:
        welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FinBot!</b>

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
üí∞ –£—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
üìä –°—Ç—Ä–æ–∏—Ç—å –æ—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É  
üìà –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å
üìÅ –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±—é–¥–∂–µ—Ç—ã –∏ –ª–∏–º–∏—Ç—ã

<b>–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b> –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:
‚Ä¢ <code>1200 –æ–±–µ–¥</code> - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
‚Ä¢ <code>+5000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code> - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥

–Ø —É–∂–µ —Å–æ–∑–¥–∞–ª –¥–ª—è —Ç–µ–±—è –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ù–∞—á–Ω–µ–º! üëá
        """
    else:
        welcome_text = f"""
üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!</b>

–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:
        """
    
    await message.answer(
        welcome_text.strip(),
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    text = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await callback.message.edit_text(
        text.strip(),
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(Command("menu"))
async def menu_command(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    text = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, {message.from_user.first_name}:
    """
    
    await message.answer(
        text.strip(),
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )

@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    await state.clear()
    await message.answer(
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard()
    )

@router.callback_query(F.data.startswith("cancel"))
async def cancel_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ callback"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

@router.message(Command("status"))
async def status_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with get_async_session() as db:
        user = await UserCRUD.get_by_telegram_id(db, message.from_user.id)
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        status_text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞</b>

<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} {user.last_name or ''}
<b>üÜî ID:</b> <code>{user.telegram_id}</code>
<b>üí± –í–∞–ª—é—Ç–∞:</b> {user.currency}
<b>üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {user.timezone}
<b>üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user.created_at.strftime('%d.%m.%Y %H:%M')}

<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user.notification_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
<b>üìä –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç:</b> {f'{user.daily_limit:,.0f} {user.currency}'.replace(',', ' ') if user.daily_limit else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
<b>üìà –ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç:</b> {f'{user.monthly_limit:,.0f} {user.currency}'.replace(',', ' ') if user.monthly_limit else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

<b>üì± –ë–æ—Ç:</b> –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚úÖ
<b>üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ ‚úÖ
        """
        
        await message.answer(
            status_text.strip(),
            parse_mode="HTML",
            reply_markup=main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@router.message(F.text.startswith("/"))
async def unknown_command(message: Message):
    command = message.text.split()[0]
    await message.answer(
        f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: <code>{command}</code>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        parse_mode="HTML",
        reply_markup=main_menu_keyboard()
    )