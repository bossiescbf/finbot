from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.crud import CategoryCRUD
from app.keyboards.inline import (
    get_categories_keyboard, 
    get_back_keyboard,
    edit_categories_keyboard,
    edit_category_actions_keyboard,
    delete_category_confirmation_keyboard,
    category_type_selection_keyboard
)
from app.middlewares.auth import auth_required
from app.utils.formatting import format_categories_text

router = Router()

class AddCategoryStates(StatesGroup):
    waiting_name = State()
    waiting_icon = State()
    waiting_type = State()

@router.callback_query(F.data == "categories_menu")
@auth_required
async def show_categories_menu(call: CallbackQuery, user, db: AsyncSession, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    income_categories = await CategoryCRUD.get_user_categories(db, user.id, is_income=True)
    expense_categories = await CategoryCRUD.get_user_categories(db, user.id, is_income=False)
    
    if not income_categories and not expense_categories:
        text = "üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
        keyboard = get_back_keyboard()
        keyboard.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")
        await call.message.edit_text(text, reply_markup=keyboard.as_markup())
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ utils
    text = format_categories_text(income_categories, expense_categories)
    
    keyboard = get_categories_keyboard()
    await call.message.edit_text(
        text, 
        reply_markup=keyboard.as_markup(), 
        parse_mode="HTML"
    )

@router.callback_query(F.data == "edit_categories")
@auth_required
async def show_edit_categories_menu(call: CallbackQuery, user, db: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    income_categories = await CategoryCRUD.get_user_categories(db, user.id, is_income=True)
    expense_categories = await CategoryCRUD.get_user_categories(db, user.id, is_income=False)
    
    if not income_categories and not expense_categories:
        await call.message.edit_text(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=get_back_keyboard().as_markup()
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ inline.py
    keyboard = edit_categories_keyboard(income_categories, expense_categories)
    
    await call.message.edit_text(
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("edit_category:"))
@auth_required
async def edit_specific_category(call: CallbackQuery, user, db: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(call.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    category = await CategoryCRUD.get_category_by_id(db, category_id)
    
    if not category:
        await call.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_categories = await CategoryCRUD.get_user_categories(db, user.id)
    if category not in user_categories:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ inline.py
    keyboard = edit_category_actions_keyboard(category_id)
    
    category_type = "–¥–æ—Ö–æ–¥–æ–≤" if category.is_income else "—Ä–∞—Å—Ö–æ–¥–æ–≤"
    
    await call.message.edit_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n"
        f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category.icon} {category.name}\n"
        f"**–¢–∏–ø:** {category_type}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("delete_category:"))  
@auth_required
async def confirm_delete_category(call: CallbackQuery, user, db: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(call.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = await CategoryCRUD.get_category_by_id(db, category_id)
    
    if not category:
        await call.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ inline.py
    keyboard = delete_category_confirmation_keyboard(category_id)
    
    await call.message.edit_text(
        f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n"
        f"**{category.icon} {category.name}**?\n\n"
        f"‚ùóÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("confirm_delete:"))
@auth_required  
async def delete_category_confirmed(call: CallbackQuery, user, db: AsyncSession):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(call.data.split(":")[1])
    
    try:
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await CategoryCRUD.remove_category_from_user(db, user.id, category_id)
        await db.commit()
        
        if success:
            await call.message.edit_text(
                "‚úÖ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!**\n\n"
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∞—à–∏—Ö —Å–ø–∏—Å–∫–∞—Ö.",
                reply_markup=get_back_keyboard().as_markup(),
                parse_mode="Markdown"
            )
        else:
            await call.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ.",
                reply_markup=get_back_keyboard().as_markup(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await call.message.edit_text(
            f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:** {str(e)}",
            reply_markup=get_back_keyboard().as_markup(),
            parse_mode="Markdown"
        )

@router.callback_query(F.data == "add_category")
@auth_required
async def start_add_category(call: CallbackQuery, user, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await call.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_back_keyboard().as_markup()
    )
    await state.set_state(AddCategoryStates.waiting_name)

@router.message(AddCategoryStates.waiting_name)
@auth_required
async def process_category_name(message: Message, user, state: FSMContext, db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_name = message.text.strip()
    
    if len(category_name) > 100:
        await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(name=category_name)
    await message.reply(
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {category_name}\n\n"
        "üé® –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∂–∏-–∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_back_keyboard().as_markup()
    )
    await state.set_state(AddCategoryStates.waiting_icon)

@router.message(AddCategoryStates.waiting_icon)
@auth_required
async def process_category_icon(message: Message, user, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∫–æ–Ω–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    icon = message.text.strip()
    
    if len(icon) > 10:
        await message.reply("‚ùå –ò–∫–æ–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(icon=icon)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ inline.py
    keyboard = category_type_selection_keyboard()
    
    await message.reply(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(AddCategoryStates.waiting_type)

@router.callback_query(F.data.startswith("category_type:"))
@auth_required
async def process_category_type(call: CallbackQuery, user, state: FSMContext, db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –µ—ë"""
    category_type = call.data.split(":")[1]
    is_income = category_type == "income"
    
    data = await state.get_data()
    name = data.get("name")
    icon = data.get("icon")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = await CategoryCRUD.create_or_get_category(db, name, icon, is_income)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success = await CategoryCRUD.add_category_to_user(db, user.id, category.id)
        await db.commit()
        
        if success:
            type_text = "–¥–æ—Ö–æ–¥–æ–≤" if is_income else "—Ä–∞—Å—Ö–æ–¥–æ–≤"
            await call.message.edit_text(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è **{icon} {name}** ({type_text}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                parse_mode="Markdown"
            )
        else:
            await call.message.edit_text(
                f"‚ÑπÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è **{icon} {name}** —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ",
                parse_mode="Markdown"
            )
        
    except Exception as e:
        await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
    
    await state.clear()