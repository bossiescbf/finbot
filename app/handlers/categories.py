from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.crud import CategoryCRUD
from app.keyboards.inline import get_categories_keyboard, get_back_keyboard
from app.middlewares.auth import auth_required

router = Router()

class AddCategoryStates(StatesGroup):
    waiting_name = State()
    waiting_icon = State()
    waiting_type = State()

@router.callback_query(F.data == "categories_menu")
@auth_required
async def show_categories_menu(call: CallbackQuery, user, db: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    income_categories = await CategoryCRUD.get_user_categories(db, user.id, is_income=True)
    expense_categories = await CategoryCRUD.get_user_categories(db, user.id, is_income=False)
    
    if not income_categories and not expense_categories:
        text = "üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
        keyboard = get_back_keyboard()
        keyboard.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")
        await call.message.edit_text(text, reply_markup=keyboard.as_markup())
        return
    
    text = "üìä **–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n\n"
    
    if income_categories:
        text += "üí∞ **–î–æ—Ö–æ–¥—ã:**\n"
        for cat in income_categories:
            text += f"{cat.icon} {cat.name}\n"
        text += "\n"
    
    if expense_categories:
        text += "üí∏ **–†–∞—Å—Ö–æ–¥—ã:**\n"
        for cat in expense_categories:
            text += f"{cat.icon} {cat.name}\n"
    
    keyboard = get_categories_keyboard()
    await call.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "add_category")
@auth_required
async def start_add_category(call: CallbackQuery, user, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await call.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_back_keyboard().as_markup()
    )
    await state.set_state(AddCategoryStates.waiting_name)

@router.message(AddCategoryStates.waiting_name)
@auth_required
async def process_category_name(message: Message, user, state: FSMContext, db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_name = message.text.strip()
    
    if len(category_name) > 100:
        await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(name=category_name)
    await message.reply(
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {category_name}\n\n"
        "üé® –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∂–∏-–∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_back_keyboard().as_markup()
    )
    await state.set_state(AddCategoryStates.waiting_icon)

@router.message(AddCategoryStates.waiting_icon)
@auth_required
async def process_category_icon(message: Message, user, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∫–æ–Ω–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    icon = message.text.strip()
    
    if len(icon) > 10:
        await message.reply("‚ùå –ò–∫–æ–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(icon=icon)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –î–æ—Ö–æ–¥", callback_data="category_type:income")
    kb.button(text="üí∏ –†–∞—Å—Ö–æ–¥", callback_data="category_type:expense")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="categories_menu")
    kb.adjust(2, 1)
    
    await message.reply(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=kb.as_markup()
    )
    await state.set_state(AddCategoryStates.waiting_type)

@router.callback_query(F.data.startswith("category_type:"))
@auth_required
async def process_category_type(call: CallbackQuery, user, state: FSMContext, db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –µ—ë"""
    category_type = call.data.split(":")[1]
    is_income = category_type == "income"
    
    data = await state.get_data()
    name = data.get("name")
    icon = data.get("icon")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = await CategoryCRUD.create_or_get_category(db, name, icon, is_income)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success = await CategoryCRUD.add_category_to_user(db, user.id, category.id)
        await db.commit()
        
        if success:
            type_text = "–¥–æ—Ö–æ–¥–æ–≤" if is_income else "—Ä–∞—Å—Ö–æ–¥–æ–≤"
            await call.message.edit_text(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è **{icon} {name}** ({type_text}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                parse_mode="Markdown"
            )
        else:
            await call.message.edit_text(
                f"‚ÑπÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è **{icon} {name}** —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data == "categories_income")
@auth_required
async def show_income_categories(call: CallbackQuery, user, db: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
    categories = await CategoryCRUD.get_user_categories(db, user.id, is_income=True)
    
    if not categories:
        await call.message.edit_text(
            "üí∞ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤",
            reply_markup=get_back_keyboard().as_markup()
        )
        return
    
    text = "üí∞ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:**\n\n"
    for cat in categories:
        text += f"{cat.icon} {cat.name}\n"
    
    await call.message.edit_text(
        text,
        reply_markup=get_back_keyboard().as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "categories_expenses")
@auth_required
async def show_expense_categories(call: CallbackQuery, user, db: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    categories = await CategoryCRUD.get_user_categories(db, user.id, is_income=False)
    
    if not categories:
        await call.message.edit_text(
            "üí∏ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤",
            reply_markup=get_back_keyboard().as_markup()
        )
        return
    
    text = "üí∏ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:**\n\n"
    for cat in categories:
        text += f"{cat.icon} {cat.name}\n"
    
    await call.message.edit_text(
        text,
        reply_markup=get_back_keyboard().as_markup(),
        parse_mode="Markdown"
    )